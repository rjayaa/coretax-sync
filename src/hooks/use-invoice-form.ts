
// src/hooks/use-invoice-form.ts
import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useSession } from 'next-auth/react'
import { v4 as uuidv4 } from 'uuid'
import type { faktur, detailFaktur, taxMasterCustomer } from '@/lib/db/index'

type Customer = typeof taxMasterCustomer.$inferSelect
type Invoice = typeof faktur.$inferSelect
type InvoiceDetail = typeof detailFaktur.$inferSelect

interface Company {
  id: string
  company_name: string
  company_code: string
  npwp: string
}

interface TransactionItem {
  kodeTransaksi: string
  itemType: 'B' | 'J'
  kode: string
  nama: string
  satuan: string
  hargaSatuan: string
  kuantitas: string
  totalHarga: string
  potonganHarga: string
  dppNilaiLain: boolean
  dppValue: string
  tarifPPN: string
  ppnValue: string
  tarifPPnBM: string
  ppnbmValue: string
  keteranganTambahan?: string
  capFasilitas?: string
}

export function useInvoiceForm() {
  const router = useRouter()
  const { data: session } = useSession()
  
  const [selectedCustomer, setSelectedCustomer] = useState<Customer | null>(null)
  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null)
  const [transaction, setTransaction] = useState<TransactionItem | null>(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)

 

  // Load selected company from session
  useEffect(() => {
    if (session?.user?.company) {
      setSelectedCompany(session.user.company)
    }
  }, [session])

  // Validate form
  const isFormValid = Boolean(
    selectedCustomer?.id &&
    selectedCompany?.id &&
    transaction?.kode && // Memastikan ada item yang dipilih
    transaction?.kodeTransaksi // Memastikan kode transaksi dipilih
  )

  const handleSubmit = async () => {
    if (!isFormValid || !transaction) return

    setIsLoading(true)
    setError(null)

    try {
      // Parse nilai numerik
      const hargaSatuan = parseFloat(transaction.hargaSatuan)
      const kuantitas = parseFloat(transaction.kuantitas)
      const potonganHarga = parseFloat(transaction.potonganHarga)
      const dpp = parseFloat(transaction.dppValue)
      const ppn = parseFloat(transaction.ppnValue)
      const ppnbm = parseFloat(transaction.ppnbmValue)

      // Prepare invoice data
      const invoiceData = {
        id: uuidv4(),
        nomorFaktur: '', // Will be generated by backend
        npwpPenjual: selectedCompany?.npwp,
        tanggalFaktur: new Date().toISOString(),
        jenisFaktur: 'Normal',
        kodeTransaksi: transaction.kodeTransaksi,
        keteranganTambahanKode: transaction.keteranganTambahan,
        capFasilitasKode: transaction.capFasilitas,
        nomorInvoice: `INV/${new Date().getFullYear()}/${String(new Date().getMonth() + 1).padStart(2, '0')}/${String(new Date().getDate()).padStart(2, '0')}/${Math.random().toString(36).substring(2, 7).toUpperCase()}`,
        npwpPembeli: selectedCustomer?.npwp,
        namaPembeli: selectedCustomer?.nama,
        alamatPembeli: selectedCustomer?.alamat,
        emailPembeli: selectedCustomer?.email,
        dppTotal: dpp,
        ppnTotal: ppn,
        ppnbmTotal: ppnbm,
        status: 'draft',
        details: [{
          id: uuidv4(),
          nomorUrut: 1,
          barangJasa: transaction.itemType,
          kodeBarangJasa: transaction.kode,
          namaBarangJasa: transaction.nama,
          namaSatuanUkur: transaction.satuan,
          hargaSatuan,
          jumlah: kuantitas,
          hargaTotal: parseFloat(transaction.totalHarga),
          diskon: potonganHarga,
          dpp,
          ppn,
          tarifPpnbm: parseFloat(transaction.tarifPPnBM),
          ppnbm
        }]
      }

      const response = await fetch('/api/invoices', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(invoiceData),
      })

      if (!response.ok) {
        throw new Error('Gagal membuat faktur')
      }

      router.push('/user/invoices')
      
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Gagal membuat faktur')
    } finally {
      setIsLoading(false)
    }
  }

  return {
    selectedCustomer,
    selectedCompany,
    transaction,
    isLoading,
    error,
    isFormValid,
    setSelectedCustomer,
    setTransaction,
    handleSubmit,
    router
  }
}